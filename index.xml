<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Omar Aparicio</title>
    <link>https://omaraparicio07.github.io/</link>
    <description>Recent content on Omar Aparicio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jun 2019 16:17:02 -0500</lastBuildDate>
    
	<atom:link href="https://omaraparicio07.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>¿Que son los closures?</title>
      <link>https://omaraparicio07.github.io/post/closures/</link>
      <pubDate>Fri, 14 Jun 2019 16:17:02 -0500</pubDate>
      
      <guid>https://omaraparicio07.github.io/post/closures/</guid>
      <description>Dentro de los elementos mas complicados de digerir hasta el momento en groovy es el concepto de closures, el había tenido un acercamiento trabajando con javascript pero no tenía idea de que recibiera ese nombre. Tratando de relacionarlos, los callbacks de js tiene un comportamiento similar a los closures aunque no se si tengan el mismo alcance, me explico, por lo que he estado checando los closures de groovy permiten realizar acciones y retornar un valor hasta aqui es identico a un callback de js pero groovy tiene la capacidad de delegar acciones que se ejecuten fuera del propio alcance del closure y con js no se si se pueda realizar este tipo de comportamiento.</description>
    </item>
    
    <item>
      <title>Groovy Truth y nuevos operadores</title>
      <link>https://omaraparicio07.github.io/post/groovy_operator/</link>
      <pubDate>Thu, 13 Jun 2019 10:24:07 -0500</pubDate>
      
      <guid>https://omaraparicio07.github.io/post/groovy_operator/</guid>
      <description>Groovy truth Continuando con groovy me encontré con una caracteristica muy interesante,Groovy Truth, es como se conoce a la capacidad que tiene groovy de extender la evaluación booleana de java. Dentro de una sentencia de decisión if para poder evaluar si una cadena es vacia en java tendriamos que realizar algo similar a esto:
String strEmpty = &amp;quot;&amp;quot;; if(strEmpty.isEmpty()) System.out.println(&amp;quot;cadena Vacia&amp;quot;);  Donde se aprecia que es necesario llamar a un metodo que realice la evaluacion y de como resultado un valor booleano, ya que es el unico tipo de dato que puede evaliar java en una sentencia if mientra que groovy ya evalua por defecto una cadena vacia como falso y no es necesario llamar a ningun metodo, otros elementos que groovy evalua como falsos por defectos son los que se aprecian en la imágen</description>
    </item>
    
    <item>
      <title>Iniciando con groovy</title>
      <link>https://omaraparicio07.github.io/post/iniciando_groovy/</link>
      <pubDate>Wed, 12 Jun 2019 08:50:47 -0500</pubDate>
      
      <guid>https://omaraparicio07.github.io/post/iniciando_groovy/</guid>
      <description>Trabajando con anterioridad con el lenguaje java empezabá a pensar que entre mas tecnologías de dicho lenguaje aprendiera sería cada vez más complicado recordar la sintaxis, decoradores, estructuras que maneja cada una de ellas. El simple hecho de no olvidar colocar el nivel de acceso a un metodo o atributo se vulve algo tedioso en un proyecto con una cantidad de elementos.
Hace poco me enteró que existe una alternativa a java llamada groovy, un lenguaje que también es ssoportado por la JVM(Java Virtual Machine) y que es capaz de ejecutar todo codigo escrito en java sin realizar ningún cambio.</description>
    </item>
    
  </channel>
</rss>